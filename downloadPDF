import os
import re
import pandas as pd
import requests
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import pickle

# Function to extract Google Drive file ID
def extract_drive_id(link):
    file_pattern = r"https:\/\/drive\.google\.com\/file\/d\/([a-zA-Z0-9_-]+)"
    match_file = re.match(file_pattern, link)
    
    if match_file:
        return match_file.group(1)
    else:
        return None

# Function to authenticate with Google Drive
def authenticate_gdrive():
    SCOPES = ['https://www.googleapis.com/auth/drive.readonly']
    creds = None

    # Token file stores the user's access and refresh tokens
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)

    # If there are no valid credentials, ask the user to log in
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)

        # Save the credentials for the next run
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    service = build('drive', 'v3', credentials=creds)
    return service

# Function to download a Google Drive file using file ID
def download_file_from_gdrive(service, file_id, folder_path):
    try:
        # Get the file metadata to retrieve the name
        file_metadata = service.files().get(fileId=file_id, fields='name').execute()
        file_name = file_metadata['name']  # Extract the actual file name

        file_url = f"https://drive.google.com/uc?export=download&id={file_id}"
        response = requests.get(file_url)
        response.raise_for_status()  # Raise an error for bad responses

        # Prepare the file path using the actual file name
        file_path = os.path.join(folder_path, file_name)

        # Write the file to the local system
        with open(file_path, 'wb') as drive_file:
            drive_file.write(response.content)
        
        print(f"Downloaded Google Drive file: {file_path}")
        return True, None  # Return success status and no error

    except Exception as e:
        print(f"Failed to download Google Drive file with ID {file_id}: {e}")
        return False, str(e)  # Return failure status and the error message

# Function to download PDF files directly from URL
def download_pdf(pdf_url, folder_path):
    try:
        response = requests.get(pdf_url)
        response.raise_for_status()  # Raise an error for bad responses

        # Prepare the filename
        file_name = pdf_url.split("/")[-1]
        file_path = os.path.join(folder_path, file_name)

        # Write the PDF to file
        with open(file_path, 'wb') as pdf_file:
            pdf_file.write(response.content)
        
        print(f"Downloaded PDF: {file_path}")
        return True, None  # Return success status and no error

    except Exception as e:
        print(f"Failed to download PDF from {pdf_url}: {e}")
        return False, str(e)  # Return failure status and the error message

# Function to sanitize folder names (removes invalid characters for Windows)
def sanitize_folder_name(name):
    # Remove or replace characters that are invalid for Windows folder names
    invalid_chars = r'[<>:"/\\|?*\'()]'  # Apostrophe and parentheses are included
    sanitized_name = re.sub(invalid_chars, '', name)  # Remove invalid characters
    return re.sub(r'\s+', ' ', sanitized_name).strip()  # Replace multiple spaces with a single space

def main():
    # Load your Excel file
    df = pd.read_excel(r'C:\Users\nb1633\Documents\BATCH 80.xlsx')

    # Authenticate with Google Drive
    service = authenticate_gdrive()

    # Ensure a base download directory
    base_download_path = './layoutDownloads'
    os.makedirs(base_download_path, exist_ok=True)

    # List to track failed downloads with errors
    failed_downloads = []

    for index, row in df.iterrows():
        drawing_links = row['Layout Link']  # Assume this is the column for links
        folder_no = row['No']  # Extract the number from the 'No' column
        person_name = row['Name']  # Extract the name from the 'Name' column

        # Replace any '/' in the name with a space and sanitize the name
        person_name = person_name.replace('/', ' ')
        person_name = sanitize_folder_name(person_name)

        # Create folder name by appending 'No' value before the name
        person_folder = os.path.join(base_download_path, f"{folder_no}_{person_name}")

        # Ensure the folder is created before any downloads
        os.makedirs(person_folder, exist_ok=True)

        # Handle links (multiple links in "Layout Link")
        if pd.notna(drawing_links):  # Ensure the column has a value
            pdf_urls = drawing_links.split(',')  # Split by comma (adjust if the delimiter is different)
            
            for link in pdf_urls:
                link = link.strip()  # Remove extra whitespace

                # Check if the link is a Google Drive link
                drive_id = extract_drive_id(link)
                success = False  # Track if download was successful
                error = None  # Track the error if any

                if drive_id:
                    success, error = download_file_from_gdrive(service, drive_id, person_folder)
                elif link.endswith('.pdf'):  # If it's a direct PDF link
                    success, error = download_pdf(link, person_folder)
                else:
                    print(f"Skipping non-PDF and non-Google Drive link: {link}")
                    continue  # Skip to the next link

                # If download was not successful, track it with the error message
                if not success:
                    failed_downloads.append((row['No'], row['Name'], link, error))

    # Print all failed downloads with error messages at the end
    if failed_downloads:
        print("\nFailed Layout Downloads:")
        for failure in failed_downloads:
            print(f"No: {failure[0]}, Name: {failure[1]}, Link: {failure[2]}, Error: {failure[3]}")
    else:
        print("\nAll layout downloads were successful.")

if __name__ == "__main__":
    main()
